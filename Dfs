#include <iostream>
#include <vector>
using namespace std;

void addEdge(vector<int> adj[],int u,int v)
{
    adj[u].push_back(v); //u------>v in case of directed
    adj[v].push_back(u); //for directed remove this line means one one will have that edge
}

void DFSUtil(vector<int> adj[],int i,vector<bool> &visited)
{
    visited[i]=true;
    cout<<i<<" ";
    for(int j=0;j<adj[i].size();++j)
    {
        if(visited[adj[i][j]]==false)
            DFSUtil(adj,adj[i][j],visited);

    }
}

void DFS(vector<int> adj[],int n)
{
    vector<bool> visited(n,false);
    for(int i=0;i<n;++i)  //visiting all nodes
    {
        if(visited[i]==false)
        {
            DFSUtil(adj,i,visited);

        }
    }
}

int main()
{
    //cout<<"Number of Nodes/vertex: ";
   // int n; cin>>n;   //n is number of veryex or nodes
    vector<int> adj[5];
    addEdge(adj,0,1);
    addEdge(adj,0,4);
    //addEdge(adj,0,3);

    addEdge(adj,1,2);
    addEdge(adj,1,3);
    addEdge(adj,1,4);

    addEdge(adj,2,3);
    addEdge(adj,3,4);
    DFS(adj,5);
    return 0;
}
